version: '3'

services:

  # To run the app via docker-compose
  # 1. mvn clean package spring-boot:repackage -DskipTests
  # 2. mkdir -p build
  # 3. cp sample-api/target/sample-api-1.0.0-*.war build/
  # 4. docker build . -t sample-api:latest
  # 5. docker-compose up -d
  #  api:
  #    container_name: sample-api
  #    image: sample-api:latest
  #    ports:
  #      - 8080:8080
  #    depends_on:
  #      - redis
  #      - kafka
  #      - mysql
  #      - elasticsearch
  #    environment:
  #      WAIT_HOSTS: kafka:29092
  #      spring.kafka.bootstrap-servers: "kafka:29092"
  #      log.json.disable: "true"
  #      spring.redis.host: "redis"
  #      spring.datasource.url: "jdbc:mysql://mysql:3306/sample?useUnicode=yes&characterEncoding=UTF-8"
   
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    links:
      - zookeeper:zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  mysql:
    container_name: mysql
    image: mysql:5.7
    command: "mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    environment:
      MYSQL_DATABASE: configserver
      MYSQL_ROOT_PASSWORD: secret
    ports:
      - 3307:3306